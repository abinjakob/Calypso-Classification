#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 18:10:25 2024

Checkout for more detailed information (MNE)
https://mne.tools/stable/auto_tutorials/time-freq/50_ssvep.html
Machine Learning 
https://github.com/pyRiemann/pyRiemann

@author: abinjacob
    
"""

#%% libraries 

import mne
import numpy as np
import matplotlib.pyplot as plt
import os.path as op

import pyriemann
from pyriemann.estimation import Covariances
from pyriemann.tangentspace import TangentSpace

from sklearn.model_selection import cross_val_score
from sklearn.pipeline import make_pipeline
from sklearn.svm import SVC


#%% params

# filter
l_freq = 0.1 
h_freq = None
# epoching 
tmin = -0.2
tmax = 4

# Events
event_id = {'stim_L15': 13, 'stim_L20': 14, 'stim_R15': 15, 'stim_R20': 16}
event_names = list(event_id.keys())
foi = [15, 20, 15, 20] # Freqs of interest

# PSD computation
fmin = 1.0
fmax = 100.0
# Show filter
show_filter = False

#%% load data 

rootpath = r'/Users/abinjacob/Documents/01. Calypso/EEG Coding/SSVEP/DATA'
# EEGLab file to load (.set)
filename = 'SSVEP_pilot2_rawdata.set'
filepath = op.join(rootpath,filename)
# load file in mne 
raw = mne.io.read_raw_eeglab(filepath, eog= 'auto', preload= True)
a = raw.info

#Preprocess the data
# extracting events 
events, _ = mne.events_from_annotations(raw, verbose= False)
epochs = mne.Epochs(
    raw, 
    events= events, 
    event_id= [event_id['stim_L15'], event_id['stim_L20'], event_id['stim_R15'], event_id['stim_R20']], 
    tmin=tmin, tmax=tmax, 
    baseline= None, 
    preload= True, 
    reject={'eeg': 3.0}) # Reject epochs based on maximum peak-to-peak signal amplitude (PTP)
                         # No rejection due to very high value 

#%% Frequency analysis - Calculate power spectral density (PSD)

sfreq = epochs.info["sfreq"]

spectrum = epochs.compute_psd(
    method="welch",
    n_fft=int(sfreq * (tmax - tmin)),
    n_overlap=0,
    n_per_seg=None,
    tmin=tmin,
    tmax=tmax,
    fmin=fmin,
    fmax=fmax,
    window="boxcar",
    verbose=False,
)
psds, freqs = spectrum.get_data(return_freqs=True)
print(f"Shape of psds (NumEpochs, NumChans, NumFreqBins): {psds.shape}")

# Plot PSD - all 4 conditions
# fig, axs = plt.subplots(2, 2, sharex="all", sharey="none", figsize=(8, 5))
# axs = axs.reshape(-1)
# freq_range = range(np.where(np.floor(freqs) == fmin)[0][0], np.where(np.ceil(freqs) == fmax - 1)[0][0])
# for i in range(0,4):  
#     # Get all events for specific event ID (condition)
#     condition = event_names[i]
#     idx = epochs.events[:,2]==event_id[condition]
#     # Select only corresponding epochs
#     psds_plot = 10 * np.log10(psds[idx,:,:])
#     psds_mean = psds_plot.mean(axis=(0, 1))[freq_range] # mean over trials and channels
#     psds_std = psds_plot.std(axis=(0, 1))[freq_range]
    
#     # Plot
#     axs[i].plot(freqs[freq_range], psds_mean, color="b")
#     axs[i].fill_between(
#         freqs[freq_range], psds_mean - psds_std, psds_mean + psds_std, color="b", alpha=0.2
#         )
#     axs[i].set(title=f"PSD spectrum {condition}", ylabel="Power Spectral Density [dB]")

# fig.show()

## plot Topoplot - all 4 Conditions
# fig, axs = plt.subplots(2, 2, figsize=(8, 5))
# axs = axs.reshape(-1)

# for i in range(0,4):
    
#     # Get all events for specific event ID (condition)
#     condition = event_names[i]
#     idx = epochs.events[:,2]==event_id[condition]
#     # Select only corresponding epochs
#     # psds_plot = 10 * np.log10(psds[idx,:,:])
#     psds_plot = psds[idx,:,:]
#     psds_mean = psds_plot.mean(axis=(0))
#     # Get condition-specific frequency
#     freq_range = range(np.where(np.floor(freqs) == foi[i]-1)[0][0], np.where(np.ceil(freqs) == foi[i]+1)[0][0])
#     # Mean over freq bins
#     psds_mean = psds_mean[:,freq_range].mean(axis=1)
  
    
#     # Plot
#     mne.viz.plot_topomap(psds_mean, epochs.info, axes=axs[i])
#     axs[i].set(title=f"PSD spectrum {condition}")
    

#%% SVM Classification

# Create a label vector
labels = epochs.events[:,2]

for i in range(0,len(labels)):
    if labels[i]==13 or labels[i]==15:
        labels[i] = 15
    else:
        labels[i] = 20
        
# Refine psds to frequency range around [12,25]
freq_range = range(np.where(np.floor(freqs) == 12)[0][0], np.where(np.ceil(freqs) == 25)[0][0])
# Mean over freq bins
X = psds[:,:,freq_range]
# X = psds
# X = epochs.get_data() # regularization necessary
y = labels # labels

# estimate covariance matrices
cov = pyriemann.estimation.Covariances().fit_transform(X)

# build your pipeline
covest = Covariances()
ts = TangentSpace()
svc = SVC(kernel='linear')
clf = make_pipeline(covest, ts, svc)

# cross validation
accuracy = cross_val_score(clf, X, y)
# print accuracy
print(accuracy.mean())


#%% Riemannian - MDM Classification

# estimate covariance matrices
cov = pyriemann.estimation.Covariances().fit_transform(X)
# cross validation
mdm = pyriemann.classification.MDM()
accuracy = cross_val_score(mdm, cov, y)
print(accuracy.mean())
